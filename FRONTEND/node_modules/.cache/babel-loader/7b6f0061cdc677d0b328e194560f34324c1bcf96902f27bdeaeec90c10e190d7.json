{"ast":null,"code":"import api from './api';\nexport const authService = {\n  // Patient Authentication\n  patientLogin: async credentials => {\n    try {\n      const response = await api.post('/auth/patient/login', credentials);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  },\n  patientRegister: async userData => {\n    try {\n      const response = await api.post('/auth/patient/register', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed'\n      };\n    }\n  },\n  // Admin Authentication\n  adminLogin: async credentials => {\n    try {\n      const response = await api.post('/auth/admin/login', credentials);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Admin login failed'\n      };\n    }\n  },\n  adminRegister: async userData => {\n    try {\n      const response = await api.post('/auth/admin/register', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        message: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Admin registration failed'\n      };\n    }\n  },\n  // Profile Management\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        message: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Profile update failed'\n      };\n    }\n  },\n  // Password Management\n  changePassword: async passwordData => {\n    try {\n      const response = await api.put('/auth/change-password', passwordData);\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        message: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Password change failed'\n      };\n    }\n  },\n  // Token Validation\n  validateToken: async () => {\n    try {\n      const response = await api.get('/auth/validate');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        message: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Token validation failed'\n      };\n    }\n  }\n};","map":{"version":3,"names":["api","authService","patientLogin","credentials","response","post","success","data","message","error","_error$response","_error$response$data","patientRegister","userData","_error$response2","_error$response2$data","adminLogin","_error$response3","_error$response3$data","adminRegister","_error$response4","_error$response4$data","updateProfile","put","_error$response5","_error$response5$data","changePassword","passwordData","_error$response6","_error$response6$data","validateToken","get","_error$response7","_error$response7$data"],"sources":["F:/Path2Wellness - ITP Project/FRONTEND/src/services/authService.js"],"sourcesContent":["import api from './api';\n\nexport const authService = {\n  // Patient Authentication\n  patientLogin: async (credentials) => {\n    try {\n      const response = await api.post('/auth/patient/login', credentials);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Login failed'\n      };\n    }\n  },\n\n  patientRegister: async (userData) => {\n    try {\n      const response = await api.post('/auth/patient/register', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Registration failed'\n      };\n    }\n  },\n\n  // Admin Authentication\n  adminLogin: async (credentials) => {\n    try {\n      const response = await api.post('/auth/admin/login', credentials);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Admin login failed'\n      };\n    }\n  },\n\n  adminRegister: async (userData) => {\n    try {\n      const response = await api.post('/auth/admin/register', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Admin registration failed'\n      };\n    }\n  },\n\n  // Profile Management\n  updateProfile: async (userData) => {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Profile update failed'\n      };\n    }\n  },\n\n  // Password Management\n  changePassword: async (passwordData) => {\n    try {\n      const response = await api.put('/auth/change-password', passwordData);\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Password change failed'\n      };\n    }\n  },\n\n  // Token Validation\n  validateToken: async () => {\n    try {\n      const response = await api.get('/auth/validate');\n      return {\n        success: true,\n        data: response.data.data\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.response?.data?.message || 'Token validation failed'\n      };\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}