{"ast":null,"code":"var _jsxFileName = \"F:\\\\Path2Wellness - ITP Project\\\\FRONTEND\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userType = localStorage.getItem('userType');\n        const userData = localStorage.getItem('userData');\n        if (token && userType && userData) {\n          const parsedUserData = JSON.parse(userData);\n          setUser({\n            ...parsedUserData,\n            userType\n          });\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Clear invalid data\n        localStorage.removeItem('token');\n        localStorage.removeItem('userType');\n        localStorage.removeItem('userData');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (credentials, userType) => {\n    try {\n      setLoading(true);\n      let response;\n      if (userType === 'admin') {\n        response = await authService.adminLogin(credentials);\n      } else {\n        response = await authService.patientLogin(credentials);\n      }\n      if (response.success) {\n        const userData = {\n          id: response.data.id,\n          name: response.data.name,\n          email: response.data.email,\n          userType: userType\n        };\n\n        // Store in localStorage\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('userType', userType);\n        localStorage.setItem('userData', JSON.stringify(userData));\n        setUser(userData);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          data: userData\n        };\n      } else {\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('userType');\n    localStorage.removeItem('userData');\n\n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const register = async (userData, userType) => {\n    try {\n      setLoading(true);\n      let response;\n      if (userType === 'admin') {\n        response = await authService.adminRegister(userData);\n      } else {\n        response = await authService.patientRegister(userData);\n      }\n      if (response.success) {\n        return {\n          success: true,\n          message: 'Registration successful'\n        };\n      } else {\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateProfile = async updatedData => {\n    try {\n      setLoading(true);\n      const response = await authService.updateProfile(updatedData);\n      if (response.success) {\n        const updatedUser = {\n          ...user,\n          ...updatedData\n        };\n        setUser(updatedUser);\n        localStorage.setItem('userData', JSON.stringify(updatedUser));\n        return {\n          success: true,\n          message: 'Profile updated successfully'\n        };\n      } else {\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Profile update error:', error);\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed. Please try again.'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","initializeAuth","token","localStorage","getItem","userType","userData","parsedUserData","JSON","parse","error","console","removeItem","login","credentials","response","adminLogin","patientLogin","success","id","data","name","email","setItem","stringify","message","_error$response","_error$response$data","logout","register","adminRegister","patientRegister","_error$response2","_error$response2$data","updateProfile","updatedData","updatedUser","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Path2Wellness - ITP Project/FRONTEND/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Check if user is logged in on app start\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const userType = localStorage.getItem('userType');\n        const userData = localStorage.getItem('userData');\n\n        if (token && userType && userData) {\n          const parsedUserData = JSON.parse(userData);\n          setUser({\n            ...parsedUserData,\n            userType\n          });\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        // Clear invalid data\n        localStorage.removeItem('token');\n        localStorage.removeItem('userType');\n        localStorage.removeItem('userData');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (credentials, userType) => {\n    try {\n      setLoading(true);\n      let response;\n\n      if (userType === 'admin') {\n        response = await authService.adminLogin(credentials);\n      } else {\n        response = await authService.patientLogin(credentials);\n      }\n\n      if (response.success) {\n        const userData = {\n          id: response.data.id,\n          name: response.data.name,\n          email: response.data.email,\n          userType: userType\n        };\n\n        // Store in localStorage\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('userType', userType);\n        localStorage.setItem('userData', JSON.stringify(userData));\n\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        return { success: true, data: userData };\n      } else {\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Login failed. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('userType');\n    localStorage.removeItem('userData');\n\n    // Reset state\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  const register = async (userData, userType) => {\n    try {\n      setLoading(true);\n      let response;\n\n      if (userType === 'admin') {\n        response = await authService.adminRegister(userData);\n      } else {\n        response = await authService.patientRegister(userData);\n      }\n\n      if (response.success) {\n        return { success: true, message: 'Registration successful' };\n      } else {\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Registration failed. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updatedData) => {\n    try {\n      setLoading(true);\n      const response = await authService.updateProfile(updatedData);\n\n      if (response.success) {\n        const updatedUser = { ...user, ...updatedData };\n        setUser(updatedUser);\n        localStorage.setItem('userData', JSON.stringify(updatedUser));\n        return { success: true, message: 'Profile updated successfully' };\n      } else {\n        return { success: false, message: response.message };\n      }\n    } catch (error) {\n      console.error('Profile update error:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Profile update failed. Please try again.' \n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    register,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}